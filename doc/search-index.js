var searchIndex = JSON.parse('{\
"weather":{"doc":"","t":[0,0,5,0,5,13,3,4,13,13,13,4,3,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,3,11,11,11,11,12,11,11,11,11,11,11,12,11,5,11,11,11,11,11,17,2,2,3,17,3,8,0,11,11,11,11,12,12,11,11,10,11,11,11,11,0,12,11,12,11,11,11,11,11,11,3,3,3,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,12,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["cli","config","main","providers","run","Accu","Cli","Command","Configure","Get","Open","ProviderKind","ProviderKindIter","SetDefault","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","back_idx","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command","command_for_update","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_str","full_name","get","group_id","has_subcommand","has_subcommand","idx","into","into","into","into","into_iter","iter","len","marker","next","next_back","nth","parse_date","parse_provider_kind","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","address","api_key","date","default","provider","provider","provider","CONFIG_FILE_PATH","Config","borrow","borrow_mut","configure_provider","default","default","default_provider","deserialize","from","get_api_key","into","load","providers","save","select_provider","serialize","set_default_provider","try_from","try_into","type_id","APP_USER_AGENT","AccuWeather","OpenWeather","ProviderHandle","TIMEOUT_SECONDS","Weather","WeatherProvider","accu_weather","borrow","borrow","borrow_mut","borrow_mut","date","details","from","from","get_weather","get_weather","into","into","new","open_weather","place","print","provider","try_from","try_from","try_into","try_into","type_id","type_id","AccuWeather","Country","DataUnit","Day","Forecast","MinMaxData","Place","Wind","api_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","country","date","day","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","from","from","from","from","from","from","from","from","get_place","get_weather","into","into","into","into","into","into","into","into","key","localized_name","localized_name","maximum","minimum","new","real_feel_temperature","short_phrase","speed","temperature","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wind","City","Forecast","Main","OpenWeather","ResponseData","Wind","api_key","avrg_by_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","city","client","country","deserialize","deserialize","deserialize","deserialize","deserialize","dt_txt","feels_like","from","from","from","from","from","from","get_weather","humidity","into","into","into","into","into","into","list","main","name","new","speed","temp_max","temp_min","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wind"],"q":["weather","","","","","weather::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weather::cli::Command","","","","","","","weather::config","","","","","","","","","","","","","","","","","","","","","weather::providers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weather::providers::accu_weather","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weather::providers::open_weather","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Runs command from CLI.","AccuWeather","","","Set up provider and its API key","Get weather at specified address","OpenWeather","","An iterator over the variants of Self","Set default provider","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Custom parser for date format.","Custom parser for <code>ProviderKind</code>.","","","","","","","","","","","","","","","","","","","","","","","","Specify API key","Specify date (up to 5 days ahead)","Use this provider by default","","","Specify provider","","Holds information about configured providers and the name …","","","Sets provider, either specified by argument or selected by …","","","Gets default provider.","","Returns the argument unchanged.","Gets referance to API key for specified provider.","Calls <code>U::from(self)</code>.","Read configuration from file","","","Prompts to select provider with arrow keys.","","Set provider to use by default. If <code>None</code> is passed - asks …","","","","","","","Wrapper that generalises different providers","","Standart for reporting weather data.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Requests forecast info and formats it as <code>Weather</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a general handle to specific provider depending on …","","","","","","","","","","","AccuWeather API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request location key.","Request location key and then request <code>Weather</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","OpenWeather API.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request <code>Weather</code> using automatic geocoding.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,0,0,10,10,5,0,0,10,1,1,10,5,10,5,6,1,10,5,6,1,10,5,6,5,6,5,6,1,1,1,1,10,5,6,1,10,5,1,10,5,5,5,6,1,10,5,6,1,10,5,6,6,5,6,6,6,6,6,0,0,6,5,6,5,1,10,5,6,1,10,5,6,1,10,5,6,1,10,5,1,10,5,37,38,37,38,38,39,37,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,0,0,0,0,0,0,20,21,20,21,20,20,20,21,40,21,20,21,21,0,20,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,29,29,22,23,24,25,26,27,28,29,22,23,24,25,26,27,28,29,22,24,24,22,23,24,25,26,27,28,29,22,23,24,25,26,27,28,29,29,29,22,23,24,25,26,27,28,22,22,23,25,25,29,24,27,28,24,29,22,23,24,25,26,27,28,29,22,23,24,25,26,27,28,29,22,23,24,25,26,27,28,26,27,0,0,0,0,0,0,36,0,36,31,32,33,34,35,36,31,32,33,34,35,31,36,32,31,32,33,34,35,33,34,36,31,32,33,34,35,36,34,36,31,32,33,34,35,31,33,32,36,35,34,34,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,33],"f":[0,0,[[]],0,[[1,2],3],0,0,0,0,0,0,0,0,0,[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[6,6],[[]],[[]],[[],4],0,[[],4],[[]],[[]],[[]],[[]],[7,[[9,[1,8]]]],[7,[[9,[10,8]]]],[7,[[9,[5,8]]]],[7,[[9,[1,8]]]],[7,[[9,[10,8]]]],[7,[[9,[5,8]]]],[11,[[3,[5]]]],[5,12],[[6,13],[[14,[5]]]],[[],[[14,[15]]]],[11,16],[11,16],0,[[]],[[]],[[]],[[]],[[]],[[],6],[6,13],0,[6,14],[6,14],[[6,13],14],[11,[[3,[17]]]],[11,[[3,[5]]]],[6],[[]],[[]],[5,12],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[1,7],[[9,[8]]]],[[10,7],[[9,[8]]]],[[5,7],[[9,[8]]]],[[1,7],[[9,[8]]]],[[10,7],[[9,[8]]]],[[5,7],[[9,[8]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[2,[14,[5]],[14,[12]],16],3],[[],2],0,[2,[[3,[12]]]],[[],[[9,[2]]]],[[]],[[2,11],[[3,[12]]]],[[]],[[],[[3,[2]]]],0,[2,3],[[[19,[12]],11],[[3,[12]]]],[2,9],[[2,[14,[5]]],3],[[],9],[[],9],[[],18],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[12,[14,[17]]],[[3,[20]]]],[[21,12,[14,[17]]],[[3,[20]]]],[[]],[[]],[[2,[14,[5]]],[[3,[21]]]],0,0,[20],0,[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[9,[22]]]],[[],[[9,[23]]]],[[],[[9,[24]]]],[[],[[9,[25]]]],[[],[[9,[26]]]],[[],[[9,[27]]]],[[],[[9,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,12],[[3,[22]]]],[[29,12,[14,[17]]],[[3,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[12,30],29],0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],[[9,[31]]]],[[],[[9,[32]]]],[[],[[9,[33]]]],[[],[[9,[34]]]],[[],[[9,[35]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[36,12,[14,[17]]],[[3,[20]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[12,30],36],0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0],"p":[[3,"Cli"],[3,"Config"],[6,"Result"],[3,"Command"],[4,"ProviderKind"],[3,"ProviderKindIter"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[4,"Command"],[15,"str"],[3,"String"],[15,"usize"],[4,"Option"],[3,"Id"],[15,"bool"],[3,"NaiveDate"],[3,"TypeId"],[3,"Vec"],[3,"Weather"],[3,"ProviderHandle"],[3,"Place"],[3,"Country"],[3,"Forecast"],[3,"MinMaxData"],[3,"DataUnit"],[3,"Day"],[3,"Wind"],[3,"AccuWeather"],[3,"Client"],[3,"ResponseData"],[3,"City"],[3,"Forecast"],[3,"Main"],[3,"Wind"],[3,"OpenWeather"],[13,"Get"],[13,"Configure"],[13,"SetDefault"],[8,"WeatherProvider"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
